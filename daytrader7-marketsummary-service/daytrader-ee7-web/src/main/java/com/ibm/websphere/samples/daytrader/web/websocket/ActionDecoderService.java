package com.ibm.websphere.samples.daytrader.web.websocket;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import com.ibm.websphere.samples.daytrader.util.Log;
import javax.websocket.DecodeException;
import javax.websocket.Decoder;
import javax.websocket.EndpointConfig;

/**
 * Service class for ActionDecoder - Generated by Cardinal
 */

@Path("/ActionDecoderService")
public class ActionDecoderService {
    private static final Logger klu__logger = CardinalLogger.getLogger(ActionDecoderService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        klu__logger.info("[ActionDecoder] getHealth() called");
        return "ActionDecoderService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[ActionDecoderService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[ActionDecoder] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/ActionDecoder")
    @Produces(MediaType.APPLICATION_JSON)
    public Response ActionDecoder(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        ActionDecoder instActionDecoder;
        try {
            instActionDecoder = new ActionDecoder();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to constructor ActionDecoder() raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instActionDecoder);
        instActionDecoder.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/destroy")
    public void destroy(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        ActionDecoder instActionDecoder = (ActionDecoder)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instActionDecoder.destroy();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method destroy() of ActionDecoder raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/init")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void init(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("config") String config,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "config" to physical/proxy object(s)
        EndpointConfig config_fpar = (EndpointConfig)SerializationUtil.decodeWithDynamicTypeCheck(config);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        ActionDecoder instActionDecoder = (ActionDecoder)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instActionDecoder.init(config_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method init() of ActionDecoder raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/decode")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response decode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("jsonText") String jsonText,
        @Context HttpServletResponse servletResponse
    ) {

        String jsonText_fpar = jsonText;

        ActionMessage response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        ActionDecoder instActionDecoder = (ActionDecoder)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instActionDecoder.decode(jsonText_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method decode() of ActionDecoder raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        klu__logger.info("[ActionDecoder] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/willDecode")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response willDecode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("s") String s,
        @Context HttpServletResponse servletResponse
    ) {

        String s_fpar = s;

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        ActionDecoder instActionDecoder = (ActionDecoder)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instActionDecoder.willDecode(s_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method willDecode() of ActionDecoder raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[ActionDecoder] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}