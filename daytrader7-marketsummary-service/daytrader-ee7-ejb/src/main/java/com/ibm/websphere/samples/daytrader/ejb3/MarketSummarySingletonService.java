package com.ibm.websphere.samples.daytrader.ejb3;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;

/**
 * Service class for MarketSummarySingleton - Generated by Cardinal
 */

@Path("/MarketSummarySingletonService")
public class MarketSummarySingletonService {
    private static final Logger klu__logger = CardinalLogger.getLogger(MarketSummarySingletonService.class);

    // default constructor service
    @POST
    @Path("/MarketSummarySingleton_default_ctor")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response MarketSummarySingleton_default_ctor() {
        MarketSummarySingleton instMarketSummarySingleton = new MarketSummarySingleton();
        String refid = ClusterObjectManager.putObject(instMarketSummarySingleton);
        instMarketSummarySingleton.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        klu__logger.info("[MarketSummarySingletonService] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        klu__logger.info("[MarketSummarySingleton] getHealth() called");
        return "MarketSummarySingletonService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[MarketSummarySingletonService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[MarketSummarySingleton] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/getMarketSummaryDataBean")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMarketSummaryDataBean(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        MarketSummaryDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        MarketSummarySingleton instMarketSummarySingleton = (MarketSummarySingleton)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instMarketSummarySingleton.getMarketSummaryDataBean();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getMarketSummaryDataBean() of MarketSummarySingleton raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        klu__logger.info("[MarketSummarySingleton] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setMarketSummaryDataBean")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMarketSummaryDataBean(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("marketSummaryDataBean") String marketSummaryDataBean,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "marketSummaryDataBean" to physical/proxy object(s)
        MarketSummaryDataBean marketSummaryDataBean_fpar = (MarketSummaryDataBean)SerializationUtil.decodeWithDynamicTypeCheck(marketSummaryDataBean);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        MarketSummarySingleton instMarketSummarySingleton = (MarketSummarySingleton)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instMarketSummarySingleton.setMarketSummaryDataBean(marketSummaryDataBean_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setMarketSummaryDataBean() of MarketSummarySingleton raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}