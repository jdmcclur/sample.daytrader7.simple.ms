package com.ibm.websphere.samples.daytrader.util;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.util.Collection;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Service class for Log - Generated by Cardinal
 */

@Path("/LogService")
public class LogService {
    private static final Logger klu__logger = CardinalLogger.getLogger(LogService.class);

    // default constructor service
    @POST
    @Path("/Log_default_ctor")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response Log_default_ctor() {
        Log instLog = new Log();
        String refid = ClusterObjectManager.putObject(instLog);
        instLog.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        klu__logger.info("[LogService] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        klu__logger.info("[Log] getHealth() called");
        return "LogService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[LogService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[Log] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/log_001")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void log_001(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.log(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method log() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/log_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void log_002(
        @FormParam("msg1") String msg1,
        @FormParam("msg2") String msg2,
        @Context HttpServletResponse servletResponse
    ) {

        String msg1_fpar = msg1;

        String msg2_fpar = msg2;

        try {
            Log.log(msg1_fpar, msg2_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method log() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/log_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void log_003(
        @FormParam("msg1") String msg1,
        @FormParam("msg2") String msg2,
        @FormParam("msg3") String msg3,
        @Context HttpServletResponse servletResponse
    ) {

        String msg1_fpar = msg1;

        String msg2_fpar = msg2;

        String msg3_fpar = msg3;

        try {
            Log.log(msg1_fpar, msg2_fpar, msg3_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method log() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_004")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_004(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.error(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_005")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_005(
        @FormParam("message") String message,
        @FormParam("e") String e,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "e" to physical/proxy object(s)
        Throwable e_fpar = (Throwable)SerializationUtil.decodeWithDynamicTypeCheck(e);

        try {
            Log.error(message_fpar, e_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_006")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_006(
        @FormParam("msg1") String msg1,
        @FormParam("msg2") String msg2,
        @FormParam("e") String e,
        @Context HttpServletResponse servletResponse
    ) {

        String msg1_fpar = msg1;

        String msg2_fpar = msg2;

        
        // convert reference ID(s) stored in "e" to physical/proxy object(s)
        Throwable e_fpar = (Throwable)SerializationUtil.decodeWithDynamicTypeCheck(e);

        try {
            Log.error(msg1_fpar, msg2_fpar, e_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_007")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_007(
        @FormParam("msg1") String msg1,
        @FormParam("msg2") String msg2,
        @FormParam("msg3") String msg3,
        @FormParam("e") String e,
        @Context HttpServletResponse servletResponse
    ) {

        String msg1_fpar = msg1;

        String msg2_fpar = msg2;

        String msg3_fpar = msg3;

        
        // convert reference ID(s) stored in "e" to physical/proxy object(s)
        Throwable e_fpar = (Throwable)SerializationUtil.decodeWithDynamicTypeCheck(e);

        try {
            Log.error(msg1_fpar, msg2_fpar, msg3_fpar, e_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_008")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_008(
        @FormParam("e") String e,
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "e" to physical/proxy object(s)
        Throwable e_fpar = (Throwable)SerializationUtil.decodeWithDynamicTypeCheck(e);

        String message_fpar = message;

        try {
            Log.error(e_fpar, message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_009")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_009(
        @FormParam("e") String e,
        @FormParam("msg1") String msg1,
        @FormParam("msg2") String msg2,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "e" to physical/proxy object(s)
        Throwable e_fpar = (Throwable)SerializationUtil.decodeWithDynamicTypeCheck(e);

        String msg1_fpar = msg1;

        String msg2_fpar = msg2;

        try {
            Log.error(e_fpar, msg1_fpar, msg2_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/error_0010")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void error_0010(
        @FormParam("e") String e,
        @FormParam("msg1") String msg1,
        @FormParam("msg2") String msg2,
        @FormParam("msg3") String msg3,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "e" to physical/proxy object(s)
        Throwable e_fpar = (Throwable)SerializationUtil.decodeWithDynamicTypeCheck(e);

        String msg1_fpar = msg1;

        String msg2_fpar = msg2;

        String msg3_fpar = msg3;

        try {
            Log.error(e_fpar, msg1_fpar, msg2_fpar, msg3_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method error() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0011")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0011(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.trace(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0012")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0012(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        try {
            Log.trace(message_fpar, parm1_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0013")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0013(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @FormParam("parm2") String parm2,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        
        // convert reference ID(s) stored in "parm2" to physical/proxy object(s)
        Object parm2_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm2);

        try {
            Log.trace(message_fpar, parm1_fpar, parm2_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0014")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0014(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @FormParam("parm2") String parm2,
        @FormParam("parm3") String parm3,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        
        // convert reference ID(s) stored in "parm2" to physical/proxy object(s)
        Object parm2_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm2);

        
        // convert reference ID(s) stored in "parm3" to physical/proxy object(s)
        Object parm3_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm3);

        try {
            Log.trace(message_fpar, parm1_fpar, parm2_fpar, parm3_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0015")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0015(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @FormParam("parm2") String parm2,
        @FormParam("parm3") String parm3,
        @FormParam("parm4") String parm4,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        
        // convert reference ID(s) stored in "parm2" to physical/proxy object(s)
        Object parm2_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm2);

        
        // convert reference ID(s) stored in "parm3" to physical/proxy object(s)
        Object parm3_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm3);

        
        // convert reference ID(s) stored in "parm4" to physical/proxy object(s)
        Object parm4_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm4);

        try {
            Log.trace(message_fpar, parm1_fpar, parm2_fpar, parm3_fpar, parm4_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0016")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0016(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @FormParam("parm2") String parm2,
        @FormParam("parm3") String parm3,
        @FormParam("parm4") String parm4,
        @FormParam("parm5") String parm5,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        
        // convert reference ID(s) stored in "parm2" to physical/proxy object(s)
        Object parm2_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm2);

        
        // convert reference ID(s) stored in "parm3" to physical/proxy object(s)
        Object parm3_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm3);

        
        // convert reference ID(s) stored in "parm4" to physical/proxy object(s)
        Object parm4_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm4);

        
        // convert reference ID(s) stored in "parm5" to physical/proxy object(s)
        Object parm5_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm5);

        try {
            Log.trace(message_fpar, parm1_fpar, parm2_fpar, parm3_fpar, parm4_fpar, parm5_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0017")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0017(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @FormParam("parm2") String parm2,
        @FormParam("parm3") String parm3,
        @FormParam("parm4") String parm4,
        @FormParam("parm5") String parm5,
        @FormParam("parm6") String parm6,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        
        // convert reference ID(s) stored in "parm2" to physical/proxy object(s)
        Object parm2_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm2);

        
        // convert reference ID(s) stored in "parm3" to physical/proxy object(s)
        Object parm3_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm3);

        
        // convert reference ID(s) stored in "parm4" to physical/proxy object(s)
        Object parm4_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm4);

        
        // convert reference ID(s) stored in "parm5" to physical/proxy object(s)
        Object parm5_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm5);

        
        // convert reference ID(s) stored in "parm6" to physical/proxy object(s)
        Object parm6_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm6);

        try {
            Log.trace(message_fpar, parm1_fpar, parm2_fpar, parm3_fpar, parm4_fpar, parm5_fpar, parm6_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/trace_0018")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void trace_0018(
        @FormParam("message") String message,
        @FormParam("parm1") String parm1,
        @FormParam("parm2") String parm2,
        @FormParam("parm3") String parm3,
        @FormParam("parm4") String parm4,
        @FormParam("parm5") String parm5,
        @FormParam("parm6") String parm6,
        @FormParam("parm7") String parm7,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "parm1" to physical/proxy object(s)
        Object parm1_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm1);

        
        // convert reference ID(s) stored in "parm2" to physical/proxy object(s)
        Object parm2_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm2);

        
        // convert reference ID(s) stored in "parm3" to physical/proxy object(s)
        Object parm3_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm3);

        
        // convert reference ID(s) stored in "parm4" to physical/proxy object(s)
        Object parm4_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm4);

        
        // convert reference ID(s) stored in "parm5" to physical/proxy object(s)
        Object parm5_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm5);

        
        // convert reference ID(s) stored in "parm6" to physical/proxy object(s)
        Object parm6_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm6);

        
        // convert reference ID(s) stored in "parm7" to physical/proxy object(s)
        Object parm7_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(parm7);

        try {
            Log.trace(message_fpar, parm1_fpar, parm2_fpar, parm3_fpar, parm4_fpar, parm5_fpar, parm6_fpar, parm7_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method trace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/traceEnter")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void traceEnter(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.traceEnter(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method traceEnter() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/traceExit")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void traceExit(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.traceExit(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method traceExit() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/stat")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void stat(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.stat(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method stat() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/debug")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void debug(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.debug(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method debug() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/print")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void print(
        @FormParam("message") String message,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        try {
            Log.print(message_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method print() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/printObject")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void printObject(
        @FormParam("o") String o,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "o" to physical/proxy object(s)
        Object o_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(o);

        try {
            Log.printObject(o_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method printObject() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/printCollection_0019")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void printCollection_0019(
        @FormParam("c") String c,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "c" to physical/proxy object(s)
        Collection<?> c_fpar = (Collection<?>)SerializationUtil.decodeWithDynamicTypeCheck(c);

        try {
            Log.printCollection(c_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method printCollection() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/printCollection_0020")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void printCollection_0020(
        @FormParam("message") String message,
        @FormParam("c") String c,
        @Context HttpServletResponse servletResponse
    ) {

        String message_fpar = message;

        
        // convert reference ID(s) stored in "c" to physical/proxy object(s)
        Collection<?> c_fpar = (Collection<?>)SerializationUtil.decodeWithDynamicTypeCheck(c);

        try {
            Log.printCollection(message_fpar, c_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method printCollection() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/doActionTrace")
    @Produces(MediaType.APPLICATION_JSON)
    public Response doActionTrace(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
            response = Log.doActionTrace();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method doActionTrace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Log] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/doTrace")
    @Produces(MediaType.APPLICATION_JSON)
    public Response doTrace(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
            response = Log.doTrace();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method doTrace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Log] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/doDebug")
    @Produces(MediaType.APPLICATION_JSON)
    public Response doDebug(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
            response = Log.doDebug();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method doDebug() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Log] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/doStat")
    @Produces(MediaType.APPLICATION_JSON)
    public Response doStat(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
            response = Log.doStat();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method doStat() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Log] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getTrace")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getTrace(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
            response = Log.getTrace();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getTrace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Log] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getActionTrace")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getActionTrace(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
            response = Log.getActionTrace();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getActionTrace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Log] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setTrace")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setTrace(
        @FormParam("traceValue") String traceValue,
        @Context HttpServletResponse servletResponse
    ) {

        boolean traceValue_fpar = Boolean.parseBoolean(traceValue);

        try {
            Log.setTrace(traceValue_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setTrace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/setActionTrace")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setActionTrace(
        @FormParam("traceValue") String traceValue,
        @Context HttpServletResponse servletResponse
    ) {

        boolean traceValue_fpar = Boolean.parseBoolean(traceValue);

        try {
            Log.setActionTrace(traceValue_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setActionTrace() of Log raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}